!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        start: 0,
        stop: 50000
    },
    model: !obj:CAN.CompressAdversaryPair {
        compressor: !obj:CAN.compressor {
            mlp: !obj:pylearn2.models.mlp.MLP {
            layers: [ %(compressor_MLP_YAML)s
                    ]
            }
        },
        discriminator: 
            !obj:pylearn2.models.mlp.MLP {
            layers: [ %(discrimnator_MLP_YAML)s
                    ],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i
        learning_rate: %(lr)f),
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: %(momentum)f,
        },
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'train',
                              start: 50000,
                              stop:  60000
                          },
            },
        cost: !obj:CAN.AdversaryCost_A {
            init_train_clock: %(init_train_clock)i,
            discriminator_steps: %(discriminator_steps)i,
            joint_steps: %(joint_steps)i,
            compressor_steps: %(compressor_steps)i
            },
        #!obj:pylearn2.costs.mlp.dropout.Dropout {
        #    input_include_probs: { 'h0' : .8 },
        #    input_scales: { 'h0': 1. }
        #},
        #termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
        #    channel_name: "valid_y_misclass",
        #    prop_decrease: 0.,
        #    N: 100
        #},
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: %(lr_decay)f,
            min_lr: %(min_lr)f
        }
    },
    extensions: [
        #!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
        #     channel_name: 'valid_y_misclass',
        #     save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        #},
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
